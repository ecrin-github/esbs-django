# Generated by Django 4.1.6 on 2024-04-08 15:44

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('general', '0001_initial'),
        ('context', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Users',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'users',
                'verbose_name_plural': 'users',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserProfiles',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('ls_aai_id', models.CharField(blank=True, max_length=255, null=True)),
                ('prof_title', models.CharField(blank=True, max_length=25, null=True)),
                ('full_name', models.CharField(blank=True, max_length=255, null=True)),
                ('inverted_full_name', models.CharField(blank=True, max_length=255, null=True)),
                ('ocrid', models.CharField(blank=True, max_length=75, null=True)),
                ('designation', models.CharField(blank=True, max_length=255, null=True)),
                ('organisation', models.ForeignKey(blank=True, db_column='organisation_id', default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users_organisation_id', to='general.organisations')),
                ('role', models.ForeignKey(blank=True, db_column='role_id', default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users_role_id', to='context.roletypes')),
                ('role_class', models.ForeignKey(blank=True, db_column='role_class_id', default='', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users_role_class', to='context.roleclasses')),
                ('user', models.OneToOneField(blank=True, db_column='user_id', default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_profile', to=settings.AUTH_USER_MODEL)),
                ('user_type', models.ForeignKey(blank=True, db_column='user_type_id', default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users_user_type', to='context.rmsusertypes')),
            ],
            options={
                'db_table': 'user_profiles',
            },
        ),
    ]
